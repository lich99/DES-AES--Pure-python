# -*- coding: utf-8 -*-
"""
Created on Fri Oct 18 23:04:30 2019

@author: Chenghai Li
"""
import numpy as np
import time

S = [
    [0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76],
    [0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0],
    [0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15],
    [0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75],
    [0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84],
    [0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF],
    [0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8],
    [0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2],
    [0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73],
    [0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB],
    [0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79],
    [0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08],
    [0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A],
    [0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E],
    [0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF],
    [0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16]
]

InvS = [
    [0x52, 0x09, 0x6A, 0xD5, 0x30, 0x36, 0xA5, 0x38, 0xBF, 0x40, 0xA3, 0x9E, 0x81, 0xF3, 0xD7, 0xFB],
    [0x7C, 0xE3, 0x39, 0x82, 0x9B, 0x2F, 0xFF, 0x87, 0x34, 0x8E, 0x43, 0x44, 0xC4, 0xDE, 0xE9, 0xCB],
    [0x54, 0x7B, 0x94, 0x32, 0xA6, 0xC2, 0x23, 0x3D, 0xEE, 0x4C, 0x95, 0x0B, 0x42, 0xFA, 0xC3, 0x4E],
    [0x08, 0x2E, 0xA1, 0x66, 0x28, 0xD9, 0x24, 0xB2, 0x76, 0x5B, 0xA2, 0x49, 0x6D, 0x8B, 0xD1, 0x25],
    [0x72, 0xF8, 0xF6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xD4, 0xA4, 0x5C, 0xCC, 0x5D, 0x65, 0xB6, 0x92],
    [0x6C, 0x70, 0x48, 0x50, 0xFD, 0xED, 0xB9, 0xDA, 0x5E, 0x15, 0x46, 0x57, 0xA7, 0x8D, 0x9D, 0x84],
    [0x90, 0xD8, 0xAB, 0x00, 0x8C, 0xBC, 0xD3, 0x0A, 0xF7, 0xE4, 0x58, 0x05, 0xB8, 0xB3, 0x45, 0x06],
    [0xD0, 0x2C, 0x1E, 0x8F, 0xCA, 0x3F, 0x0F, 0x02, 0xC1, 0xAF, 0xBD, 0x03, 0x01, 0x13, 0x8A, 0x6B],
    [0x3A, 0x91, 0x11, 0x41, 0x4F, 0x67, 0xDC, 0xEA, 0x97, 0xF2, 0xCF, 0xCE, 0xF0, 0xB4, 0xE6, 0x73],
    [0x96, 0xAC, 0x74, 0x22, 0xE7, 0xAD, 0x35, 0x85, 0xE2, 0xF9, 0x37, 0xE8, 0x1C, 0x75, 0xDF, 0x6E],
    [0x47, 0xF1, 0x1A, 0x71, 0x1D, 0x29, 0xC5, 0x89, 0x6F, 0xB7, 0x62, 0x0E, 0xAA, 0x18, 0xBE, 0x1B],
    [0xFC, 0x56, 0x3E, 0x4B, 0xC6, 0xD2, 0x79, 0x20, 0x9A, 0xDB, 0xC0, 0xFE, 0x78, 0xCD, 0x5A, 0xF4],
    [0x1F, 0xDD, 0xA8, 0x33, 0x88, 0x07, 0xC7, 0x31, 0xB1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xEC, 0x5F],
    [0x60, 0x51, 0x7F, 0xA9, 0x19, 0xB5, 0x4A, 0x0D, 0x2D, 0xE5, 0x7A, 0x9F, 0x93, 0xC9, 0x9C, 0xEF],
    [0xA0, 0xE0, 0x3B, 0x4D, 0xAE, 0x2A, 0xF5, 0xB0, 0xC8, 0xEB, 0xBB, 0x3C, 0x83, 0x53, 0x99, 0x61],
    [0x17, 0x2B, 0x04, 0x7E, 0xBA, 0x77, 0xD6, 0x26, 0xE1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0C, 0x7D]
]

mix_f = [
    [2,3,1,1],
    [1,2,3,1],
    [1,1,2,3],
    [3,1,1,2]
]

mix_b = [
    [0x0E,0x0B,0x0D,0x09],
    [0x09,0x0E,0x0B,0x0D],
    [0x0D,0x09,0x0E,0x0B],
    [0x0B,0x0D,0x09,0x0E]
        ]

def encode (s):
    return [ord(c) for c in s]
 
def decode (s):
    return ''.join([chr(i) for i in s])

def s_f (matrix):
    for i in range(4):
        for j in range(4):    
            matrix[i][j] = S[matrix[i][j]//16][matrix[i][j]%16]

def s_b (matrix):
    for i in range(4):
            for j in range(4):    
                matrix[i][j] = InvS[matrix[i][j]//16][matrix[i][j]%16]
    
def shift_row_f (s):
    s[1] = np.concatenate((s[1][1:], s[1][:1]))
    s[2] = np.concatenate((s[2][2:], s[2][:2]))
    s[3] = np.concatenate((s[3][3:], s[3][:3]))

def shift_row_b (s):
    s[1] = np.concatenate((s[1][-1:], s[1][:-1]))
    s[2] = np.concatenate((s[2][-2:], s[2][:-2]))
    s[3] = np.concatenate((s[3][-3:], s[3][:-3]))
 
def xtime (a):
    if a & 0b10000000:  #mod x^8 + x^4 + x^3 + x + 1
        return ((a << 1) ^ 0b100011011)
    else:
        return a << 1
    
def mul (a, b):
    s = list(bin(a))
    i = 0
    out = 0
    while s[-i-1] != 'b':
        if s[-i-1] == '1':
            c = b
            for j in range(i):
                c = xtime(c)
            out = out ^ c
        i += 1
    return out

def mul_matrix (a, b):
    out = np.empty((4,4),dtype=int)
    for i in range(4):
        for j in range(4):
            index = 0
            for k in range(4):
                index = index ^ mul(a[i][k], b[k][j])
            out[i][j] = index
    return out

def mix_column_f (s):
    return mul_matrix(mix_f, s)

def mix_column_b (s):
    return mul_matrix(mix_b, s)

RC = [0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1B, 0x36]

def g(vector,t):
    v = [0]*4
    for i in range(4):
        v[i] = vector[i]
    v[0],v[1],v[2],v[3] = v[1],v[2],v[3],v[0]
    for i in range (4):
        v[i] = S[v[i]//16][v[i]%16]
    v[0] = v[0] ^ RC[t]
    return v
    
def expand_key (s):
    key_list = [s]
    for i in range (10):
        new = np.empty((4,4),dtype=int)
        gw = g(key_list[i][:,3],i)
        for j in range (4):
            for k in range (4):
                if j == 0:
                    new[k][j] = key_list[i][k][j] ^ gw[k]
                else:
                    new[k][j] = key_list[i][k][j] ^ new[k][j-1]
        key_list.append(new)
    return key_list
    
def build_matrix(text):
    matrix = []
    code = encode(text)
    for i in range(16):
        byte = code[i]
        if i % 4 == 0:
            matrix.append([byte])
        else:
            matrix[int(i / 4)].append(byte)
    matrix = np.array(matrix).T
    return matrix 

def decode_matrix (s):
    out = []
    for i in range(4):
        for j in range(4):
            out.append(chr(s[j][i]))
    return ''.join(out)

def add_matrix(a, b):
    for i in range (4):
        for j in range (4):
            a[i][j] = a[i][j] ^ b[i][j]

def forward(plain, key):
    key_matrix = build_matrix(key)
    expanded_key = expand_key(key_matrix)
    plain_matrix = build_matrix(plain)
    for i in range (9):
        add_matrix(plain_matrix, expanded_key[i])
        s_f(plain_matrix)
        shift_row_f(plain_matrix)
        plain_matrix = mix_column_f(plain_matrix)
    add_matrix(plain_matrix, expanded_key[9])
    s_f(plain_matrix)   
    shift_row_f(plain_matrix)
    add_matrix(plain_matrix, expanded_key[10])
    return plain_matrix

def back(code, key):
    key_matrix = build_matrix(key)
    expanded_key = expand_key(key_matrix)
    plain_matrix = build_matrix(code)
    add_matrix(plain_matrix, expanded_key[10])
    shift_row_b(plain_matrix)
    s_b(plain_matrix)
    add_matrix(plain_matrix, expanded_key[9])
    for i in range(8,-1,-1):
        plain_matrix = mix_column_b(plain_matrix)
        shift_row_b(plain_matrix)
        s_b(plain_matrix)
        add_matrix(plain_matrix, expanded_key[i])
    return plain_matrix
    
def get_hex(s):
    out = ''
    for i in range(4):
        for j in range(4):
            out += hex(s[j][i]).replace('0x', '').zfill(2)
    return out
            
text = 'abcdef0123456789'
key = 'abcdef0123456789'

print('Plain text:',text)
print('Key:',key)

start = time.time()

forward_m = forward(text, key)
code_hex = get_hex(forward_m)
print('Encrypted hex:',code_hex)
code = decode_matrix(forward_m)
back_m = back(code, key)
ori = decode_matrix(back_m)
print('Decrypted text:',ori)

end = time.time()
print('Runtime:',end - start,'sec')